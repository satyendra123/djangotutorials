#Authentication- authentication is about validating your credentials like username and password
#autherisation - authorization is the process to determine whether the authenticated user has the access to the particular resources. it checks your rights to grant your access to resources such as information, database

django.contrib.auth= C:\Users\Gourav\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\LocalCache\local-packages\Python311\site-packages\django\contrib\auth iske andar jayenge to isme ek file rhta hai models.py name se. isko agar hum open karenge to iske andar ek
                      User name se class rhta hai pahle se. jo ki authentication ke liye rhta hai. actuall me hum jab python manage.py makemigrations aur python manage.py migrate ko run krte hai to hum xamp database me jakar dekhenge to waha ek User auth ke name se table ban jata hai
                      jisme username, password, is_admin, is_superuser, is_staff role based authentication hota hai. so ye sare chiz isi User class me defined rhta hai models.py file ke. so man lo ki mujhe user auth table me ek aur column chahiye to mai
                        direct is file me jakar change kar du yaa phir mai is class ko inherit karke apne code me iske properties ko use karunga. so isme ye mera code hai pura. ab hum is chiz ko isme samjhne ki kosis krte hai kuch kuch chize

#NOTE-  so agar hum isme User class me jakar dekhte hai to User class me to ye kuch is tarah ka hota hai. means isme koi bhi code nahi likha hota hai. ye sari chize inherit karta hai AbstractUser class me se. ab hum AbstractUser class me jakar dekhte hai to class AbstractUser(AbstractBaseUser, PermissionsMixin):
        means jo humara AbstractUser hota hai wo bhi inherit karta hai AbstractBaseUser aur permissionmixin se. AbstractUser me username, first_name, last_name, email, is_staff, is_active, date_joined ye tables banta hai aur ye sare fields isme diye hue hai
ab agar bat aata hai to ye batao ki AbstractBaseUser me kya hota hoga ki hum use inherit krte hai to sayad usme kuch functions defines honge jaise setpassword se humara password hash form me jakar database me sav hota hai. same waise hi ek check password hota hai jo password ko match karta hai.
aur permissionMixins ska agar hum dekhe to isme kuch queries likhi hoti hai ki admin ko kya kya access karna chahiye aur superuser kya kya access kar sakta hai kuch ye sab chize. kuch is tarike se
EX-
    def get_all_permissions(self, obj=None):
        return _user_get_permissions(self, obj, "all")

    def has_perm(self, perm, obj=None):
        """
        Return True if the user has the specified permission. Query all
        available auth backends, but return immediately if any backend returns
        True. Thus, a user who has permission from a single auth backend is
        assumed to have permission in general. If an object is provided, check
        permissions for that object.
        """
        # Active superusers have all permissions.
        if self.is_active and self.is_superuser:
            return True

        # Otherwise we need to check the backends.
        return _user_has_perm(self, perm, obj)

    def has_perms(self, perm_list, obj=None):
        """
        Return True if the user has each of the specified permissions. If
        object is passed, check if the user has all required perms for it.
        """
        if not is_iterable(perm_list) or isinstance(perm_list, str):
            raise ValueError("perm_list must be an iterable of permissions.")
        return all(self.has_perm(perm, obj) for perm in perm_list)

    def has_module_perms(self, app_label):
        """
        Return True if the user has any permissions in the given app label.
        Use similar logic as has_perm(), above.
        """
        # Active superusers have all permissions.
        if self.is_active and self.is_superuser:
            return True

        return _user_has_module_perms(self, app_label)

                
#User objects method- isme kuch method defines hai jaise ki
(1) get_username() - it returns the username for the user
(2) get_full_name()- it returns the first name + last_name
(3) get_short_name() - it gives only the first name
(4) set_password(raw_password)- it sets the password in a hash format
(5) set_unusable_password() - it marks the user as having no password set. this is not the same as having a blank string for a password. check_password() for this user will never return true. Doesn't save the user model
(6) has_usable_password()- it returns false if set_unusable_password() has been called for this user
(7) get_user_permission(obj=None)- ye hume btayega ki user ko kaon kaon sa permission diya gaya hai

UserManager method() - The User model has a custom manager that has the following helper method(in addition to the method provided by BaseUserManager)
(i) create_user(username, email=None, **extra_fields)- it creates , saves and returns as User
(ii) authenticate(username=uname, password=pass)- it checks and match the username and password from the django backened
(iii)



                                                                                               TOPIC- Model Inheritance

(i) Abstract Base class- 


from django.db import models
class Commoninfo(models.Model):
   name=models.CharField(max_length=70)
   age=models.IntegerField()
   class Meta:
       abstract=true

Note- jab tk humne class Meta ke andar abstract=true nhi likha hai tb tk ye normal model rhta hai aur iska table banega database me lekin jaise hi hum isme ye likh dete hai to ye abstract class ban jata hai aur iska koi table nahi banta hai database me, aur abstract class ka koi manager bhi nahi banta hai


class Student(Commoninfo):
      fees=models.IntegerField()

class Teacher(Commoninfo):
      salary=models.IntegerField()

#note- isme maine kya kiya hai ki instance object create kiya hai student aur teacher class ke liye. aur is objects ki madad se hum call kar sakte hai jo bhi information hume chahiye rhta hai
# Creating instances of Student and Teacher
student = Student.objects.create(name='John Doe', age=20, fees=1000)
teacher = Teacher.objects.create(name='Jane Smith', age=30, salary=50000)

# Accessing fields inherited from CommonInfo
print(student.name)   # Output: John Doe
print(teacher.age)    # Output: 30

# Accessing fields specific to each subclass
print(student.fees)   # Output: 1000
print(teacher.salary) # Output: 50000



#NOTE- 
#login view function
from django.contrib.auth import authenticate, login, logout
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
@csrf_exempt
def user_login(request):
    if request.method == 'POST':
        username = request.POST.get('username')
        password = request.POST.get('password')
        user = authenticate(request, username=username, password=password)  
        if user is not None:
            login(request, user)
            return JsonResponse({'message': 'Login successful'}, status=200)
        else:
            return JsonResponse({'error': 'Invalid credentials'}, status=400)
    return JsonResponse({'error': 'Method not allowed'}, status=405)

#logout view function
from django.contrib.auth import logout
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt

@csrf_exempt
def user_logout(request):
    if request.method == 'POST':
        if request.user.is_authenticated:
            logout(request)
            return JsonResponse({'message': 'Logout successful'}, status=200)
        else:
            return JsonResponse({'error': 'User is not authenticated'}, status=400)

    return JsonResponse({'error': 'Method not allowed'}, status=405)


